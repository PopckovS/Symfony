## Алгоритм Дейкстры
При помщи поиска в ширину мы знаем как найти путь из точки A в точку B.
Вопрос остается в том как найти кратчайший путь если он есть.

Решим одну задачку, найдем кратчайший путь от одного узла графа к 
другому:

![](img/Screenshot from 2021-01-02 03-31-38.png)

Находим путь с наименьшим количеством шагов, найденный путь занимает
3 ребра и 2 промежуточных узла, в отличии от остальных где есть 4 
ребра и 3 узла, так мы видим кратчайший по графу путь между 2 узлами.

Но предположим что к каждому из путей привязан свой временной 
промежуток, окажется что самый короткий путь может быть и не самым
быстрым.

![](img/Screenshot from 2021-01-02 03-35-25.png)

#### Поиск в ширину - находит кратчайший путь, по количеству сегметов
Но если нам нужен самый быстрый путь в независимости от количества 
сегментов то для поиска быстрого пути в графе используется другой
алгоритм, алгоритм Дейкстры.

### Алгоритм Дейкстры

Алгоритм Дейкстры - это алгоритм поиска самого быстрого пути к узлу,
ввесовом графе.

Имеем граф с весами, прикрепленными к ребрам графа:

![](img/Screenshot from 2021-01-02 03-47-52.png)

Алгоритм Дейкстры требует выполнение 4 шагов:

1) Найти узел с наимменьшей стоимостью, тоесть узел который имеет
   наименьший вес.
2) Обновить стоимость соседей этого узла.
3) Повторять, пока этого не будет сдлеано для всех узлов графа.
4) Вычислить итоговый путь.

### Шаг 1 
До узла A будем добираться за 6 минут, а до узла B 2 минуты, об 
остальных узлах мы пок аничего не знаем, так получаем след результат:

     Узел | Время к узлу
    ------------
      A   |  6
     -----------
      B   |  2
     -----------
    Конец | Бесконечность

### Шаг 2
Вычислить, сколько времени требуется для того чтобы добраться до 
всех соседей B при переходе по ребрам из узла B.

![](img/Screenshot from 2021-01-02 05-25-13.png)

Так мы обнаружили что етсть более быстрый путь к узлу A раньше для 
этого требовалось 6 минут, теперь всего 5. При нахождении более 
короткого пути, мы обновляем преевыдущие результаты. 

### Шаг 3
####Повторяем шаг 1.
Находим узел, для перехода к которому требуется наименьшее время. 

![](img/Screenshot from 2021-01-02 05-30-50.png)

Так находим что путь от B к финальной точки имеет 7 минут, мы нашли 
время до конца, но мы не знаем является ли оно самым быстрым из всех.

####Повторяем шаг 2.
С узлом B мы закончили, и имееи время до конечного узла, о не все узлы 
пройдены, теперь ищем путь от узла A до ближайшего, и видим что путь от 
A до искомого узла равен еденицы. 

### Шаг 4
Обновляем путь до финального узла, и теперь в место 7 минут имеем 6.

Таким образом находим путь от начальной точки до B, от B до A, и от A
до искомого узла, врезультате получаем 6 минут искомого пути.

### Графы
Взвешанный граф - это граф с весами.

НеВзвешанный граф - обычный граф без весов.

![](img/Screenshot from 2021-01-02 05-44-45.png)

Для вычисления кратчайшего пути в невзвешанном графе используется 
поиск в ширину.

Кратчайший путь во взвешанном графе вычисляется алгоритмом Дейкстры.

Также при работе с графами, мы можем встретить цикл.

![](img/Screenshot from 2021-01-02 05-59-04.png)

Каждый раз проходя по циклу мы будем увеличивать время выполнения программы,
илиже можем вабще невходить в цикл.

Графы бывают направленными, и не направленными.

![](img/Screenshot from 2021-01-02 06-00-26.png)

Ненапрвленный граф ведет к другому графу, что и вызывает цикл, каждый
ненапрвыленный граф создает цикл, алггоритм Дейкстры работает только с 
направленными узлами.

![](img/Screenshot from 2021-01-02 06-02-17.png)

### Пример реализации 

![](img/Screenshot from 2021-01-02 06-14-42.png)


### Отрицательный вес 

Использование алгоритма Дейкстры с отрицательными весами у ребер невозможна.

### Реализация
Реализуем алгоритм Дейкчтры на примере следующего взвешенного графа:

![](img/Screenshot from 2021-01-02 06-26-12.png)

Для реализации алгоритма Дейкстры нам понадовится 3 хеш таблицы:

![](img/Screenshot from 2021-01-02 06-32-26.png)






![](img/)
![](img/)
